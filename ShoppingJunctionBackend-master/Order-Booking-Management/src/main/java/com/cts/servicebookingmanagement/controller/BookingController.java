package com.cts.servicebookingmanagement.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import com.cts.servicebookingmanagement.feign.AuthClient;
import com.cts.servicebookingmanagement.model.AppServiceReq;
import com.cts.servicebookingmanagement.model.AppServiceReqReport;
import com.cts.servicebookingmanagement.service.BookingService;

import com.cts.servicebookingmanagement.dto.ValidatingDTO;

@RestController
@CrossOrigin(allowedHeaders = "*", origins = "*")
public class BookingController {

	@Autowired
	private BookingService bookingService;
	
	@Autowired
	private AuthClient authClient;
	
	@GetMapping("/awsBooking")
	public String welcome() {
    	return "Booking Service Deployed to Cloud";
	}
	
    /*
     * Get All Bookings
     */
	@GetMapping("/servicereq")
	public List<AppServiceReq> getBooking(@RequestHeader(name="Authorization",required = true)String token){
		ValidatingDTO validatingDTO  = authClient.checkToken(token);
		return bookingService.getBooking();		
		 
	}
	
	
	/*
	 * Add Bookings
	 */

    @PostMapping("/servicereq")
	public AppServiceReq createBooking(@RequestHeader(name="Authorization",required = true)String token,@RequestBody AppServiceReq appServiceReq) {
		ValidatingDTO validatingDTO  = authClient.checkToken(token);
		return bookingService.createBooking(appServiceReq);
	}
	
	
    /*
     * Updating Booking
     */
    
	@PutMapping("/servicereq")
	public AppServiceReq updateBooking(@RequestHeader(name="Authorization", required = true)String token, @RequestBody AppServiceReq appServiceReq) {
		ValidatingDTO validatingDTO = authClient.checkToken(token); 
		return  bookingService.updateBooking(appServiceReq);
	}
	
	
	/*
	 * Delete Booking By ID
	 */
	
	@DeleteMapping("/servicereq/delete/{id}")
	public void deleteUser(@RequestHeader(name="Authorization", required = true)String token, @PathVariable("id") Integer id) {
		bookingService.deleteBooking(id);
	}
	
	
	/*
	 * Get Booking for a specific user (Pending/Resolved)
	 */
	
	@GetMapping("/servicereq/request/{adminId}/{status}")
	public List<AppServiceReq> getUserById(@PathVariable("adminId") Integer adminId, @PathVariable("status") String status) {
		
		return bookingService.getMyBookings(adminId, status);
	}
	
	@GetMapping("/booking/{id}")
	public AppServiceReq getBookingById(@RequestHeader(name="Authorization",required = true)String token, @PathVariable("id") Integer id) {
		ValidatingDTO validatingDTO  = authClient.checkToken(token);
		return bookingService.getBookingById(id);
	}
	
//	@GetMapping("/servicereq/status/{status}")
//	public List<AppServiceReq> getServiceByStatus(@PathVariable("status") String status) {
//		System.out.println("Controlled Worked");
//		return bookingService.getServiceByStatus(status);
//	}
	
//	@GetMapping("/servicereq/{report}")
//	public List<AppServiceReq> getServiceByReport(@PathVariable("report") String report) {
//		
//		return bookingService.getServiceByReport(report);
//	}
//	
	
	
	
	
	
	
	
	

	
	
	@GetMapping("/servicereq/details/{id}/{status}")
	public void getDetailsById(@PathVariable("id") Integer id, @PathVariable("status") String status) {
		bookingService.getBookingByIdAndStatus(id, status);
	}
	
	
	
	
	
	
	
   
	
/*	
     1.POST: /servicereq/ - Creating new order booking  ->complete
     2.PUT: /servicereq/ - Updating order booking   ->complete
     3.GET: /servicereq/ - Get All Service Bookings     ->complete
     4.DELETE:/servicereq/{id} - Deletes particular service booking  ->complete
     5.GET: /servicereq/{userId} - Get service bookings generated by particular user ->complete
     6.GET: /servicereq/{status} - Get Service Bookings by its status   ->remaining
    
     
	
	
	
	Login with Awt Authorisation*-complete*/ 

}
